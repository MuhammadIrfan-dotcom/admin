// Shamelessly stolen from vuetify.
// Also see material design material.io/guidelines/layout/responsive-ui.html#responsive-ui-breakpoints

// Breakpoints are in px because they're bound to screen size, which is in px.
// Everything else is in rem.
$grid-breakpoints: (
  xs: 0,
  sm: 600px,
  md: 960px,
  lg: 1280px,
  xl: 1920px,
) !default;

$grid-gutter-default: 0.5rem !default;
$grid-columns: 12 !default;

// These are meant to be dependent on $grid-breakpoints
$grid-gutters: (
  xs: $grid-gutter-default * 0.25,
  sm: $grid-gutter-default * 0.5,
  md: $grid-gutter-default,
  lg: $grid-gutter-default * 2,
  xl: $grid-gutter-default * 3,
) !default;

$container-max-widths: (
  // xs and sm use fluid container essentially.
  md: map-get($grid-breakpoints, md),
  lg: map-get($grid-breakpoints, lg),
  xl: map-get($grid-breakpoints, xl),
) !default;

$display-breakpoints: (
  xs-only: 'only screen and (max-width: #{(map-get($grid-breakpoints, sm) - 1)})',
  sm-only: 'only screen and (min-width: #{map-get($grid-breakpoints, sm)}) and (max-width: #{(map-get($grid-breakpoints, md)  - 1)})',
  sm-and-down: 'only screen and (max-width: #{(map-get($grid-breakpoints, md) - 1)})',
  sm-and-up: 'only screen and (min-width: #{map-get($grid-breakpoints, sm)})',
  md-only: 'only screen and (min-width: #{map-get($grid-breakpoints, md)}) and (max-width: #{(map-get($grid-breakpoints, lg)  - 1)})',
  md-and-down: 'only screen and (max-width: #{(map-get($grid-breakpoints, lg) - 1)})',
  md-and-up: 'only screen and (min-width: #{map-get($grid-breakpoints, md)})',
  lg-only: 'only screen and (min-width: #{map-get($grid-breakpoints, lg)}) and (max-width: #{(map-get($grid-breakpoints, xl) - 1)})',
  lg-and-down: 'only screen and (max-width: (#{map-get($grid-breakpoints, xl)} - 1))',
  lg-and-up: 'only screen and (min-width: #{map-get($grid-breakpoints, lg)})',
  xl-only: 'only screen and (min-width: #{map-get($grid-breakpoints, xl)})',
) !default;

// These are used for various padding and typing to make them consistent.
$spacer: 1rem !default;
$spacer-x: $spacer !default;
$spacer-y: $spacer !default;

$spacers: (
  zero: (
    x: 0,
    y: 0,
  ),
  one: (
    x: $spacer-x * 0.25,
    y: $spacer-y * 0.25,
  ),
  two: (
    x: $spacer-x * 0.5,
    y: $spacer-y * 0.5,
  ),
  three: (
    x: $spacer-x,
    y: $spacer-y,
  ),
  four: (
    x: $spacer-x * 1.5,
    y: $spacer-y * 1.5,
  ),
  five: (
    x: $spacer-x * 3,
    y: $spacer-y * 3,
  ),
) !default;

.container {
  flex: 1 1 100%;
  margin: auto;
  padding: map-get($grid-gutters, xl);
  width: 100%;

  @each $size, $width in $container-max-widths {
    @media only screen and (min-width: $width) {
      max-width: ($width * 0.9375);
    }
  }

  @media #{map-get($display-breakpoints, sm-and-down)} {
    padding: map-get($grid-gutters, lg);
  }

  &.fluid {
    max-width: 100%;
  }

  // NOTE Not exactly sure on this one. Here's what manual says:
  // > Make sure that col element height is filled with parent and child. Important for Safari/Firefox if children is column element.
  &.fill-height {
    align-items: center;
    display: flex;

    > .layout {
      flex: 1 1 auto;
      height: 100%;
    }
  }

  // This applies gutters. Otherwise grid has none.
  @each $size, $gutter in $grid-gutters {
    &.gutters--#{$size} {
      padding: $gutter;

      .layout {
        .flex {
          padding: $gutter / 2;
        }
      }

      .layout:only-child {
        margin: -($gutter / 2);
      }

      .layout:not(:only-child) {
        margin: auto (-($gutter / 2));
      }

      *:not(:only-child) {
        .layout:first-child {
          margin-top: -($gutter / 2);
        }

        .layout:last-child {
          margin-bottom: -($gutter / 2);
        }
      }
    }
  }
}

.layout {
  display: flex;
  flex: 1 1 auto;
  flex-wrap: nowrap;
  // https://github.com/vuetifyjs/vuetify/issues/3873
  min-width: 0;

  &.row {
    flex-direction: row;

    &.reverse {
      flex-direction: row-reverse;
    }
  }

  &.column {
    flex-direction: column;

    &.reverse {
      flex-direction: column-reverse;
    }

    > .flex {
      max-width: 100%;
    }
  }

  &.wrap {
    flex-wrap: wrap;
  }
}

@each $size, $width in $grid-breakpoints {
  @media all and (min-width: $width) {
    @for $n from 1 through $grid-columns {
      @if $n != 0 {
        .flex.#{$size}#{$n} {
          flex-basis: percentage($n / $grid-columns);
          flex-grow: 0;
          max-width: percentage($n / $grid-columns);
        }

        .flex.order--#{$size}#{$n} {
          order: $n;
        }
      }
      // 0 offset is used to override offset from lower breakpoint.
      .flex.offset--#{$size}#{$n} {
        // Offsets can only ever work in row layouts
        margin-left: percentage($n / $grid-columns);
      }
    }
  }
}

.flex > * {
  flex: 1 1 auto;
  max-width: 100%;
}

.align {
  &--start {
    align-items: flex-start;
  }

  &--end {
    align-items: flex-end;
  }

  &--center {
    align-items: center;
  }

  &--baseline {
    align-items: baseline;
  }
}

.align-self {
  &--start {
    align-self: flex-start;
  }

  &--end {
    align-self: flex-end;
  }

  &--center {
    align-self: center;
  }

  &--baseline {
    align-self: baseline;
  }
}

.align-content {
  &--start {
    align-content: flex-start;
  }

  &--end {
    align-content: flex-end;
  }

  &--center {
    align-content: center;
  }

  &--space-between {
    align-content: space-between;
  }

  &--space-around {
    align-content: space-around;
  }
}

.justify {
  &--start {
    justify-content: flex-start;
  }

  &--end {
    justify-content: flex-end;
  }

  &--center {
    justify-content: center;
  }

  &--space-around {
    justify-content: space-around;
  }

  &--space-between {
    justify-content: space-between;
  }
}


.justify-self {
  &--start {
    justify-self: flex-start;
  }

  &--end {
    justify-self: flex-end;
  }

  &--center {
    justify-self: center;
  }

  &--baseline {
    justify-self: baseline;
  }
}

.spacer {
  flex-grow: 1 !important;
}

.grow {
  flex-grow: 1 !important;
  flex-shrink: 0 !important;
}

.shrink {
  flex-grow: 0 !important;
  flex-shrink: 1 !important;
}

.overflow--hidden {
  overflow: hidden !important;
}

.overflow--visible {
  overflow: visible !important;
}

.overflow-y {
  overflow-y: auto;
}

.overflow-x {
  overflow-x: auto;
}

// Display helpers
.d-flex {
  display: flex !important;
}

.d-inline-flex {
  display: inline-flex !important;
}

// Not solitary. Is used in other places.
.fill-height {
  height: 100%;
}

.no-wrap {
  white-space: nowrap;
}

.ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

